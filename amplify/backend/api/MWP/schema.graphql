type WorkoutExercise
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  description: String
  muscleGroup: MuscleGroup
  color: String
  restTimeInSeconds: Int
  setsConfig: AWSJSON!
  sortOrder: Int
  workoutID: ID! @index(name: "byWorkoutBySortOrder", sortKeyFields: ["sortOrder"])
}

enum WorkoutStatus {
  INPROGRESS
  FINISHED
}

type Workout
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  status: WorkoutStatus! @index(name: "workoutsByDate", queryField: "workoutsByDate", sortKeyFields: ["dateFinished"])
  dateFinished: AWSDateTime
  totalTimeInSeconds: Int
  userID: ID! @index(name: "workoutsByUser", queryField: "workoutsByUser", sortKeyFields: ["dateFinished"])
  WorkoutExercises: [WorkoutExercise]
    @hasMany(indexName: "byWorkoutBySortOrder", fields: ["id"])
}

type Exercise
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  muscleGroup: MuscleGroup
  equipment: ExerciseEquipment
}

enum ExerciseEquipment {
  BARBELL
  BODYWEIGHT
  DUMBBELL
  EZBARBELL
  KETTLEBELL
  LEVERAGEMACHINE
  SLEDMACHINE
  SMITHMACHINE
  WEIGHTED
}

enum MuscleGroup {
  BACK
  BICEPS
  CARDIO
  CHEST
  CORE
  FOREARMS
  FULLBODY
  LEGS
  NECK
  SHOULDERS
  TRICEPS
  WEIGHTLIFTING
}

type WorkoutRoutineExercise
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  muscleGroup: MuscleGroup
  equipment: ExerciseEquipment
  color: String
  description: String
  restTimeInSeconds: Int
  sortOrder: Int
  workoutPlanRoutineID: ID! @index(name: "byWorkoutPlanRoutine")
  setsConfig: AWSJSON!
}

type WorkoutPlanRoutine
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  sortOrder: Int
  workoutPlanID: ID! @index(name: "byWorkoutPlan")
  WorkoutRoutineExercises: [WorkoutRoutineExercise]
    @hasMany(indexName: "byWorkoutPlanRoutine", fields: ["id"])
}

type User
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  email: AWSEmail
  image: String
  username: String
    @index(name: "usersByUsername", queryField: "usersByUsername")
  WorkoutPlans: [WorkoutPlan] @hasMany(indexName: "byUser", fields: ["id"])
  Workouts: [Workout] @hasMany(indexName: "workoutsByUser", fields: ["id"])
}

type WorkoutPlan
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  userID: ID! @index(name: "byUser")
  WorkoutPlanRoutines: [WorkoutPlanRoutine]
    @hasMany(indexName: "byWorkoutPlan", fields: ["id"])
}

type Mutation {
  deletePlanAndRoutines(planId: ID!): DeletePlanAndRoutinesResponse
    @function(name: "editPlanAndRoutines-${env}")
  deleteWorkoutAndExercises(workoutId: ID!): DeleteWorkoutAndExercisesResponse
  @function(name: "deleteWorkoutAndExercises-${env}")
  bulkCreateWorkoutExercises(
    exercises: [CreateWorkoutExerciseInput!]!
    routineExercisesToUpdate: [RoutineExerciseToUpdateInput]
  ): BulkCreateWorkoutExercisesResponse
    @function(name: "bulkCreateWorkoutExercises-${env}")
}

type DeletePlanAndRoutinesResponse {
  id: ID!
}

type DeleteWorkoutAndExercisesResponse {
  id: ID!
}

type BulkCreateWorkoutExercisesResponse {
  exercises: [WorkoutExercise!]!
  updatedRoutineExercises: [RoutineExerciseToUpdateResponse]!
}

input RoutineExerciseToUpdateInput {
  id: ID!
  setsConfig: AWSJSON!
}

type RoutineExerciseToUpdateResponse {
  id: ID!
  setsConfig: AWSJSON!
}

input CreateWorkoutExerciseInput {
  id: ID
  setsConfig: AWSJSON!
  sortOrder: Int
  workoutID: ID!
  name: String!
  description: String
  muscleGroup: MuscleGroup
  color: String
  restTimeInSeconds: Int
  _version: Int
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelExerciseEquipmentInput {
  eq: ExerciseEquipment
  ne: ExerciseEquipment
}

input ModelMuscleGroupInput {
  eq: MuscleGroup
  ne: MuscleGroup
}

input ModelWorkoutPlanFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  userID: ModelIDInput
  _deleted: ModelBooleanInput
  and: [ModelWorkoutPlanFilterInput]
  or: [ModelWorkoutPlanFilterInput]
  not: ModelWorkoutPlanFilterInput
}

input ModelWorkoutPlanRoutineFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  sortOrder: ModelIntInput
  workoutPlanID: ModelIDInput
  _deleted: ModelBooleanInput
  and: [ModelWorkoutPlanRoutineFilterInput]
  or: [ModelWorkoutPlanRoutineFilterInput]
  not: ModelWorkoutPlanRoutineFilterInput
}

input ModelWorkoutRoutineExerciseFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  muscleGroup: ModelMuscleGroupInput
  equipment: ModelExerciseEquipmentInput
  color: ModelStringInput
  description: ModelStringInput
  restTimeInSeconds: ModelIntInput
  sortOrder: ModelIntInput
  workoutPlanRoutineID: ModelIDInput
  setsConfig: ModelStringInput
  _deleted: ModelBooleanInput
  and: [ModelWorkoutRoutineExerciseFilterInput]
  or: [ModelWorkoutRoutineExerciseFilterInput]
  not: ModelWorkoutRoutineExerciseFilterInput
}

input ModelWorkoutStatusInput {
  eq: WorkoutStatus
  ne: WorkoutStatus
}

input ModelWorkoutFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  status: ModelWorkoutStatusInput
  dateFinished: ModelStringInput
  totalTimeInSeconds: ModelIntInput
  userID: ModelIDInput
  _deleted: ModelBooleanInput
  and: [ModelWorkoutFilterInput]
  or: [ModelWorkoutFilterInput]
  not: ModelWorkoutFilterInput
}
